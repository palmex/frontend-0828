{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\nif (Platform.OS !== 'web') {\n  var _ref;\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function (_x, _x2) {\n    return (_ref = _ref || _asyncToGenerator(function* (error, isFatal) {\n      if (ExpoErrorRecovery.saveRecoveryProps) {\n        yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n      }\n      globalHandler(error, isFatal);\n    })).apply(this, arguments);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"sources":["../src/ErrorRecovery.fx.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,SAAS,sBAAsB;AAC/B,OAAO,iBAAiB;AAExB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;EAAA,IAAA,IAAA;EACzB,IAAM,aAAa,GAAG,UAAU,CAAC,gBAAgB,CAAA,CAAE;EAGnD,UAAU,CAAC,gBAAgB,WAAA,EAAA,EAAA,GAAA;IAAA,QAAA,IAAA,GAAA,IAAA,IAAA,iBAAA,CAAC,WAAO,KAAK,EAAE,OAAO,EAAI;MACnD,IAAI,iBAAiB,CAAC,iBAAiB,EAAE;QACvC,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,CAAA,CAAE,CAAC;MACpE;MACD,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;IAC/B,CAAC,GAAA,KAAA,OAAA,SAAA;EAAA,EAAC;CACH,MAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,QAAQ,CAAC,cAAc,EAAE;EAC3D,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpC,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,CAAA,CAAE,CAAC;EAC/D,CAAC,CAAC;AACH","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}